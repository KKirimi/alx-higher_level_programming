# BaseGeometry Class Test Cases:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# Test Case: Initialize an instance of BaseGeometry
>>> gm = BaseGeometry()

# Test Case: Call area() method on an instance
>>> gm.area()
Traceback (most recent call last):
...
Exception: area() is not implemented

# Test Case: Call integer_validator() with valid values
>>> gm.integer_validator("test", 5)
>>> gm.integer_validator("number", 10)

# Test Case: Call integer_validator() with non-integer values
>>> gm.integer_validator("test", "string")
Traceback (most recent call last):
...
TypeError: test must be an integer

# Test Case: Call integer_validator() with zero value
>>> gm.integer_validator("number", 0)
Traceback (most recent call last):
...
ValueError: number must be greater than 0

# Test Case: Call integer_validator() with negative value
>>> gm.integer_validator("number", -5)
Traceback (most recent call last):
...
ValueError: number must be greater than 0

# Test Case: Call integer_validator() with valid float value
>>> gm.integer_validator("float_number", 5.0)
Traceback (most recent call last):
...
TypeError: float_number must be an integer

# Test Case: Call integer_validator() with invalid float value
>>> gm.integer_validator("float_number", 5.5)
Traceback (most recent call last):
...
TypeError: float_number must be an integer

# Test Case: Call integer_validator() with no parameters
>>> gm.integer_validator()
Traceback (most recent call last):
...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

# Test Case: Call integer_validator() with only one parameter
>>> gm.integer_validator("number")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'

# Test Case: with 3 arguments
>>> gm.integer_validator("numbers", 10, 20)
Traceback (most recent call last):
...
TypeError: integer_validator() takes 3 positional arguments but 4 were given

# Test Case: with infinite integer
>>> gm.integer_validator("infnumber", int('inf'))
Traceback (most recent call last):
...
ValueError: invalid literal for int() with base 10: 'inf'
